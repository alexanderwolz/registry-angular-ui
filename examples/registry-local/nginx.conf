
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    # docker embedded DNS server 
    resolver         127.0.0.11 ipv6=off;

    ## Set a variable to help us decide if we need to add the
    ## 'Docker-Distribution-Api-Version' header.
    ## The registry always sets this header.
    ## In the case of nginx performing auth, the header is unset
    ## since nginx is auth-ing before proxying.
    map $upstream_http_docker_distribution_api_version $docker_distribution_api_version {
        "" "registry/2.0";
    }

    server {
        listen              8080;
        server_name         localhost;

        # disable any limits to avoid HTTP 413 for large image uploads
        client_max_body_size 0;

        # required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)
        chunked_transfer_encoding on;
        # required for strict SNI checking: see Issue #70 (https://github.com/Joxit/docker-registry-ui/issues/70)
        proxy_ssl_server_name on;
        proxy_buffering off;
        proxy_ignore_headers "X-Accel-Buffering";

        location /v2 {

            # Do not allow connections from docker 1.5 and earlier
            # docker pre-1.6.0 did not properly set the user agent on ping, catch "Go *" user agents
            if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
                return 404;
            }

            if ($request_method = "OPTIONS") {
                add_header      Access-Control-Allow-Origin $http_origin always;
                add_header      Access-Control-Allow-Methods "OPTIONS, HEAD, GET, DELETE" always;
                add_header      Access-Control-Allow-Headers "Content-Type, Accept, Authorization" always;
                add_header      Access-Control-Allow-Credentials true always;
                add_header      Content-Type "text/plain charset=UTF-8";
                add_header      Content-Length 0;
                return          204;
            }

            add_header          Access-Control-Allow-Origin $http_origin always;
            add_header          Access-Control-Allow-Methods "OPTIONS, HEAD, GET, DELETE" always;
            add_header          Access-Control-Allow-Headers "Content-Type, Accept, Authorization" always;
            add_header          Access-Control-Expose-Headers "Docker-Content-Digest, Www-authenticate" always;
            add_header          Access-Control-Allow-Credentials true always;
            
            set                 $upstream registry:5000;
            proxy_pass          http://$upstream;
        }
    }

}
